{"version":3,"sources":["images/wiki.png","images/logo-w.png","components/map/map.js","components/circuits/circuits.js","components/content/content.js","components/select-year/select-year.js","components/header/header.js","components/carousel/carousel.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","CircuitMap","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","races","handleResetZoom","handleClickMarker","bind","assertThisInitialized","_this2","_this$props","zoomLevel","mapCenter","setActive","react_default","a","createElement","Map","ref","map","center","zoom","TileLayer","attribution","url","race","Fragment","Marker","position","Circuit","Location","lat","long","onClick","e","round","Popup","className","raceName","locality","country","href","target","control_default","style","marginLeft","marginTop","src","wiki","alt","Component","Circuits","circuitsYears","SelectYear","getOptions","toConsumableArray","yearsCircuits","field","value","season","label","fetch","then","response","json","sortedYears","MRData","SeasonTable","Seasons","reverse","setState","_this3","options","console","log","react_select_browser_esm","defaultValue","onChange","handleYearChange","Content","logo","select_year_SelectYear","year","Carousel","handleClickCarousel","active","index","key","App","event","setMapCenter","circuits","results","clickCircuit","undefined","getData","prevProps","prevState","getListCircuits","getYearCircuits","getRaces","RaceTable","Races","resultados","CircuitTable","_this4","latlng","lng","_ref","_this$state","header_Content","map_CircuitMap","carousel_Carousel","React","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.93aba5d2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wiki.88ed8a0b.png\";","module.exports = __webpack_public_path__ + \"static/media/logo-w.c1ad6f31.png\";","import React, { Component } from 'react';\nimport { Map, TileLayer, Marker, Popup, Polyline } from 'react-leaflet';\nimport Control from 'react-leaflet-control';\nimport wiki from '../../images/wiki.png';\n// Map Styles\n// const mapStyled = 'https://api.mapbox.com/styles/v1/jesusesteban/ck6gzx8x604xk1ipgqkwomp1g/tiles/256/{z}/{x}/{y}@2x?access_token=pk.eyJ1IjoiamVzdXNlc3RlYmFuIiwiYSI6ImNqc3VlY3EydTAxdDMzeXB2a2NycXJxZTIifQ.6Jxvu3C-J7-XWRjCVdMwdw';\n// const mapStyled = 'https://api.mapbox.com/styles/v1/jesusesteban/ck17yr99g3bx21coh6z6t0mz0/tiles/256/{z}/{x}/{y}@2x?access_token=pk.eyJ1IjoiamVzdXNlc3RlYmFuIiwiYSI6ImNqc3VlY3EydTAxdDMzeXB2a2NycXJxZTIifQ.6Jxvu3C-J7-XWRjCVdMwdw';\n//const mapStyled = 'https://api.mapbox.com/styles/v1/jesusesteban/cjyn1qsf100x61cpk2cjvnvij/tiles/256/{z}/{x}/{y}@2x?access_token=pk.eyJ1IjoiamVzdXNlc3RlYmFuIiwiYSI6ImNqc3VlY3EydTAxdDMzeXB2a2NycXJxZTIifQ.6Jxvu3C-J7-XWRjCVdMwdw';\n// const mapStyled = 'https://api.mapbox.com/styles/v1/jesusesteban/cjynakrxe1jzk1cqco7zdva6j/tiles/256/{z}/{x}/{y}@2x?access_token=pk.eyJ1IjoiamVzdXNlc3RlYmFuIiwiYSI6ImNqc3VlY3EydTAxdDMzeXB2a2NycXJxZTIifQ.6Jxvu3C-J7-XWRjCVdMwdw';\n\n// BLACK\n// const mapStyled = 'https://api.mapbox.com/styles/v1/jesusesteban/ck6sg0gp31a0f1imgchb0znld/tiles/256/{z}/{x}/{y}@2x?access_token=pk.eyJ1IjoiamVzdXNlc3RlYmFuIiwiYSI6ImNqc3VlY3EydTAxdDMzeXB2a2NycXJxZTIifQ.6Jxvu3C-J7-XWRjCVdMwdw';\nconst mapStyled = 'https://api.mapbox.com/styles/v1/jesusesteban/ck6sg2kb86pin1it43e343zsz/tiles/256/{z}/{x}/{y}@2x?access_token=pk.eyJ1IjoiamVzdXNlc3RlYmFuIiwiYSI6ImNqc3VlY3EydTAxdDMzeXB2a2NycXJxZTIifQ.6Jxvu3C-J7-XWRjCVdMwdw';\n\n\nexport default class CircuitMap extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = { \n            races: []\n        };\n        this.props.handleResetZoom();\n        this.handleClickMarker = this.props.handleClickMarker.bind(this);\n    }\n\n\n    componentDidMount() {\n        // const leafletMap = this.leafletMap.leafletElement;\n        // leafletMap.on('zoomend', () => {\n        //     const updatedZoomLevel = leafletMap.getZoom();\n        //     this.handleZoomLevelChange(updatedZoomLevel);\n        // });     \n    }\n\n\n\n    // handleClickMarker(e){        \n    //     const { latlng } = e;\n    //     const { lat, lng } = latlng;\n    //     this.props.setMapCenter(15, [lat, lng]);\n    // }\n\n\n    // getPolyLineArray() {\n    //     const circuitsCoordinates = this.props.circuits.map(circuit => {\n    //         return [circuit.Location.lat, circuit.Location.long];\n    //     });\n    //     return circuitsCoordinates;\n    // }\n\n        \n    render() {\n        const { races, zoomLevel, mapCenter, handleResetZoom, setActive } = this.props;\n        return (\n            <div>\n                <Map\n                    ref={(ref) => { this.map = ref; }}\n                    center={mapCenter}\n                    zoom={zoomLevel}\n                    >\n                <TileLayer\n                    attribution={\"Jesús Esteban\"}\n                    url={mapStyled}\n                    />\n\n                {races.map((race) => {\n                    return (\n                        <React.Fragment>\n                            <Marker \n                                position={[race.Circuit.Location.lat, race.Circuit.Location.long]}\n                                onClick={ e=> \n                                    {\n                                        this.handleClickMarker(e);\n                                        setActive(race.round)\n                                    }\n                                }   \n                            >\n                                <Popup>\n                                    <ul className={\"list-popup\"}>\n                                        <li className={\"title\"}><span>{race.raceName}</span></li>\n                                        <li>\n                                            <span>{race.Circuit.Location.locality} </span>\n                                            /\n                                            <span> {race.Circuit.Location.country}</span>\n                                        </li>\n                                        <li>\n                                            <a href={race.Circuit.url} target=\"_blank\">Wikipedia</a>\n                                        </li>\n                                    </ul>\n                                    \n                                </Popup>\n                            </Marker>     \n                        </React.Fragment>                        \n                    )\n                    })\n                }                \n\n                {/* <Polyline color=\"#F1C40F\"  weight=\"1\" positions={this.getPolyLineArray()}/> */}\n\n\n\n\n                <Control position=\"topright\">\n                    <div>\n                        <div style={{ marginLeft: '37px', marginTop: '37px' }}>\n                            <button onClick={() => handleResetZoom()}>\n                                Reset Zoom\n                            </button>\n                        </div>\n                    </div>\n                </Control>\n                </Map>\n                <img src={wiki} alt=\"wiki\" className=\"img-wiki\"/>\n                \n            </div>\n        );\n    }\n}\n\n\n\n\n\n\n\n// Recursos\n// https://towardsdatascience.com/creating-a-bubbles-map-using-react-leaflet-e75124ca1cd2\n// Ejemplos de mapas https://leaflet-extras.github.io/leaflet-providers/preview/\n// https://github.com/humangeo/leaflet-dvf/wiki/2.-Examples\n// http://www.liedman.net/leaflet-routing-machine/\n// http://rowanwins.github.io/leaflet-easyPrint/\n// https://github.com/dwilhelm89/Leaflet.StyleEditor","import React, { Component } from 'react';\n\n\n\nexport default class Circuits extends Component {\n\n    render() {\n\n        const { circuitsYears } = this.props;\n\n        return (\n            <div>\n                <div className={'list-circuits'}>\n                    <ul>\n                    {circuitsYears.map((circuitsYears) => {\n                        return (\n                            <li>\n                                <a href=\"#\">{ circuitsYears.raceName }</a>\n                            </li>                        \n                        )\n                        })\n                    }\n\n                    </ul>\n                </div>\n            </div>\n        );\n    }\n}\n\n\n\n","import React, { Component } from 'react';\n\n// import SelectYear from '../select-year/select-year';\nimport Circuits from '../circuits/circuits';\n\n\n\nexport default class Content extends Component {\n\n\n\n    render() {\n\n        return (\n            <div className={\"content\"}>\n                \n                {/* <SelectYear year={this.props.year} handleYearChange={this.props.handleYearChange}/> */}\n                \n                <Circuits year={this.props.year} circuitsYears={this.props.circuitsYears}/>\n                \n            </div>\n        );\n    }\n}\n\n\n\n","import React, { Component } from 'react';\nimport Select from 'react-select';\n\nexport default class SelectYear extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { \n            yearsCircuits: []\n        };\n    }\n\n    \n    componentWillMount() {\n        fetch('https://ergast.com/api/f1/seasons.json?limit=100')\n          .then((response) => {\n            return response.json()\n          })\n          .then((yearsCircuits) => {\n            const sortedYears = yearsCircuits.MRData.SeasonTable.Seasons.reverse();\n            this.setState({ yearsCircuits: sortedYears})\n            })\n        }   \n        \n        \n        \n        \n        getOptions = () => {\n\n            const options = [...this.state.yearsCircuits].map((field) => {\n                return ({\n                    value: field.season, \n                    label: field.season\n                })\n            });\n            return options;\n        }\n        \n        \n        \n        \n        render() {\n            const options = this.getOptions();\n\n            console.log(options[0]);\n            return (\n            <div>\n                {!!options[0] &&\n                    <div className={\"select-year\"}>\n                        <Select \n                            options={options}     \n                            defaultValue={options[0]}\n                            onChange={e => {\n                                this.props.handleYearChange({target:{value: e.value}});\n                                this.props.handleResetZoom();\n                            }\n                            }      \n                        />\n                    </div>\n\n                }\n            </div>\n        );\n    }\n}\n\n\n\n","import React, { Component } from 'react';\n\nimport SelectYear from '../select-year/select-year';\nimport logo from '../../images/logo-w.png';\n\nexport default class Content extends Component {\n    constructor(props){\n        super(props)\n    }\n\n\n    render() {\n        return (\n            <div>\n                <div className={\"header\"}>\n                    <img src={logo} alt=\"Logo\" />\n                    <SelectYear year={this.props.year} handleYearChange={this.props.handleYearChange} handleResetZoom={this.props.handleResetZoom}/>\n                </div>\n                \n                            \n            </div>\n        );\n    }\n}\n\n\n\n","import React, { Component } from 'react';\n\n\nexport default class Carousel extends Component {\n    constructor(props) {\n        super(props);\n        this.handleClickCarousel = this.props.handleClickCarousel.bind(this);\n    }\n    \n\n\n    render() {\n        const { races, active, setActive } = this.props;\n\n        return (\n            <div>\n                <div className={\"carousel\"}>\n                    <ul>\n                        {races.map((race, index) => {\n                            return (\n                                <li key={index}>\n                                    <span \n                                    className={active === race.round ? \"active\" : \"\"}\n                                    onClick={(e) => {\n                                        this.handleClickCarousel(race.Circuit.Location)\n                                        setActive(race.round)\n                                    }\n                                        }>\n                                        {race.round}\n                                    </span>\n                                </li>                                     \n                            )\n                        })\n                        }                          \n                    </ul>\n                </div>\n                \n                            \n            </div>\n        );\n    }\n}\n\n\n\n","import React from 'react';\nimport './App.scss';\n\nimport Map from './components/map/map';\nimport Content from './components/content/content';\nimport Header from './components/header/header';\nimport Carousel from './components/carousel/carousel';\n\n\n\n\nclass App extends React.Component {\n\n  constructor(){\n    super()\n    this.state = {\n      year: '2019',\n      races: [],\n      circuits: [],\n      circuitsYears: [],\n      results: [],\n      clickCircuit: undefined,\n      zoomLevel: 2.2,\n      mapCenter: [22.9837669, -10.2810849],\n      active: 0\n    }\n    this.handleClickCarousel = this.handleClickCarousel.bind(this);\n    this.handleClickMarker = this.handleClickMarker.bind(this);\n  }\n\n  componentDidMount(){\n    this.getData();\n  }\n  \n  componentDidUpdate(prevProps, prevState){\n    if(this.state.year !== prevState.year){\n      this.getData();\n    }\n  }\n  \n  \n  getData(){\n    this.getListCircuits();\n    this.getYearCircuits();\n    this.getRaces();\n  }\n\n  getListCircuits() {\n    fetch('https://ergast.com/api/f1/' + this.state.year + '.json?limit=100')\n      .then((response) => {\n        return response.json()\n      })\n      .then((yearsCircuits) => {\n        this.setState({ circuitsYears: yearsCircuits.MRData.RaceTable.Races})\n      })\n  }\n\n  getYearCircuits () {\n    fetch('https://ergast.com/api/f1/' + this.state.year + '/circuits.json?limit=100')\n        .then((response) => {\n        return response.json()\n        })\n        .then((resultados) => {\n        this.setState({ circuits: resultados.MRData.CircuitTable.Circuits})\n    })\n}\n\n  getRaces () {\n    fetch('https://ergast.com/api/f1/' + this.state.year + '.json?limit=100')\n        .then((response) => {\n        return response.json()\n        })\n        .then((resultados) => {\n        this.setState({ races: resultados.MRData.RaceTable.Races})\n    })\n\n  }\n\n\nhandleYearChange = event => {\n  const year = event.target.value;\n  this.setState({ year });\n}\n\nsetMapCenter = (zoomLevel, mapCenter) => {\n  this.setState({\n    zoomLevel, \n    mapCenter\n  })\n}\n\nhandleResetZoom = () => {\n  this.setState({ \n      zoomLevel: 2.2,\n      mapCenter: [22.9837669, -10.2810849],\n      active: 0\n  });\n}\n\nhandleClickMarker(e){        \n  const { latlng } = e;\n  const { lat, lng } = latlng;\n  this.setMapCenter(15, [lat, lng]);\n}\n\nhandleClickCarousel({lat, long}){        \n  this.setMapCenter(15, [lat, long]);\n}\n\n\nsetActive = (active) => {\n  this.setState({active});\n}\n\n\n  render (){\n    const { year, circuits, races, zoomLevel, mapCenter, active } = this.state;    \n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Header handleYearChange={this.handleYearChange} handleResetZoom={this.handleResetZoom} />\n          <Map \n            year={year} \n            circuits={circuits} \n            races={races}\n            handleResetZoom={this.handleResetZoom} \n            zoomLevel={ zoomLevel} \n            mapCenter={ mapCenter } \n            setMapCenter={this.setMapCenter}\n            handleClickMarker={this.handleClickMarker}\n            active={active}\n            setActive={this.setActive}\n          /> \n          {/* <Content year={year} circuitsYears={circuitsYears} handleYearChange={this.handleYearChange} /> */}\n          <Carousel \n            races={races}\n            handleClickMarker={this.handleClickMarker}\n            handleClickCarousel={this.handleClickCarousel}\n            active={active}\n            setActive={this.setActive}\n          />\n        </header>      \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('mount'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}