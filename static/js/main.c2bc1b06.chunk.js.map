{"version":3,"sources":["images/logo-w.png","components/map/map.js","components/circuits/circuits.js","components/content/content.js","components/select-year/select-year.js","components/header/header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","CircuitMap","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","circuits","handleClickMarker","bind","assertThisInitialized","handleResetZoom","e","latlng","lat","lng","setMapCenter","map","circuit","Location","long","_this2","_this$props","zoomLevel","mapCenter","react_default","a","createElement","Map","ref","center","zoom","TileLayer","attribution","url","Fragment","Marker","position","onClick","Popup","className","circuitName","locality","country","href","target","control_default","style","marginLeft","marginTop","Component","Circuits","circuitsYears","raceName","SelectYear","getOptions","toConsumableArray","yearsCircuits","field","value","season","label","fetch","then","response","json","setState","MRData","SeasonTable","Seasons","_this3","options","react_select_browser_esm","isSearchable","onChange","handleYearChange","Content","src","logo","alt","select_year_SelectYear","year","App","event","results","clickCircuit","undefined","getData","prevProps","prevState","getListCircuits","getYearCircuits","RaceTable","Races","resultados","CircuitTable","_this$state","header_Content","map_CircuitMap","React","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6SCYnBC,cAEjB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,SAAU,IAEdR,EAAKS,kBAAoBT,EAAKS,kBAAkBC,KAAvBT,OAAAU,EAAA,EAAAV,CAAAD,IACzBA,EAAKD,MAAMa,kBANIZ,8HAoBDa,GAAE,IACRC,EAAWD,EAAXC,OACAC,EAAaD,EAAbC,IAAKC,EAAQF,EAARE,IACbb,KAAKJ,MAAMkB,aAAa,GAAI,CAACF,EAAKC,+CAQlC,OAH4Bb,KAAKJ,MAAMS,SAASU,IAAI,SAAAC,GAChD,MAAO,CAACA,EAAQC,SAASL,IAAKI,EAAQC,SAASC,yCAM9C,IAAAC,EAAAnB,KAAAoB,EACuDpB,KAAKJ,MAAzDS,EADHe,EACGf,SAAUgB,EADbD,EACaC,UAAWC,EADxBF,EACwBE,UAAWb,EADnCW,EACmCX,gBACxC,OACIc,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACIC,IAAK,SAACA,GAAUR,EAAKJ,IAAMY,GAC3BC,OAAQN,EACRO,KAAMR,GAEVE,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACIC,YAAa,mBACbC,IAvDF,mNA0DD3B,EAASU,IAAI,SAACC,GACX,OACIO,EAAAC,EAAAC,cAACF,EAAAC,EAAMS,SAAP,KACIV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CACIC,SAAU,CAACnB,EAAQC,SAASL,IAAKI,EAAQC,SAASC,MAClDkB,QAAU,SAAA1B,GAAC,OAAGS,EAAKb,kBAAkBI,KAGrCa,EAAAC,EAAAC,cAACY,EAAA,EAAD,KACId,EAAAC,EAAAC,cAAA,MAAIa,UAAW,cACXf,EAAAC,EAAAC,cAAA,MAAIa,UAAW,SAASf,EAAAC,EAAAC,cAAA,YAAOT,EAAQuB,cACvChB,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,YAAOT,EAAQC,SAASuB,SAAxB,KADJ,IAGIjB,EAAAC,EAAAC,cAAA,gBAAQT,EAAQC,SAASwB,UAE7BlB,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,KAAGiB,KAAM1B,EAAQgB,IAAKW,OAAO,UAA7B,oBAgB5BpB,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,CAASW,SAAS,YACdZ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKoB,MAAO,CAAEC,WAAY,OAAQC,UAAW,SACzCxB,EAAAC,EAAAC,cAAA,UAAQW,QAAS,kBAAM3B,MAAvB,0BAvFYuC,aCRnBC,mLAER,IAEGC,EAAkBlD,KAAKJ,MAAvBsD,cAER,OACI3B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKa,UAAW,iBACZf,EAAAC,EAAAC,cAAA,UACCyB,EAAcnC,IAAI,SAACmC,GAChB,OACI3B,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,KAAGiB,KAAK,KAAMQ,EAAcC,uBAbtBH,gBCGDA,2BCJhBI,cAEjB,SAAAA,EAAYxD,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoD,IACfvD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsD,GAAAjD,KAAAH,KAAMJ,KAoBNyD,WAAa,WAOT,OANgBvD,OAAAwD,EAAA,EAAAxD,CAAID,EAAKO,MAAMmD,eAAexC,IAAI,SAACyC,GAC/C,MAAQ,CACJC,MAAOD,EAAME,OACbC,MAAOH,EAAME,WAvBzB7D,EAAKO,MAAQ,CACTmD,cAAe,IAHJ1D,oFAQE,IAAAsB,EAAAnB,KACjB4D,MAAM,oDACHC,KAAK,SAACC,GACL,OAAOA,EAASC,SAEjBF,KAAK,SAACN,GACHpC,EAAK6C,SAAS,CAAET,cAAeA,EAAcU,OAAOC,YAAYC,6CAoB7D,IAAAC,EAAApE,KACCqE,EAAUrE,KAAKqD,aACrB,OACA9B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKa,UAAW,eACZf,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CACIC,cAAc,EACdF,QAASA,EACTG,SAAU,SAAA9D,GACN0D,EAAKxE,MAAM6E,iBAAiB,CAAC9B,OAAO,CAACc,MAAO/C,EAAE+C,SAC9CW,EAAKxE,MAAMa,8BA9CCuC,8BCEnB0B,cACjB,SAAAA,EAAY9E,GAAO,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAA0E,GAAA5E,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4E,GAAAvE,KAAAH,KACTJ,0EAKN,OACI2B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKa,UAAW,UACZf,EAAAC,EAAAC,cAAA,OAAKkD,IAAKC,IAAMC,IAAI,SACpBtD,EAAAC,EAAAC,cAACqD,EAAD,CAAYC,KAAM/E,KAAKJ,MAAMmF,KAAMN,iBAAkBzE,KAAKJ,MAAM6E,iBAAkBhE,gBAAiBT,KAAKJ,MAAMa,2BAX7FuC,aC4FtBgC,cArFb,SAAAA,IAAa,IAAAnF,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAgF,IACXnF,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkF,GAAA7E,KAAAH,QAkDJyE,iBAAmB,SAAAQ,GACjB,IAAMF,EAAOE,EAAMtC,OAAOc,MAC1B5D,EAAKmE,SAAS,CAAEe,UArDHlF,EAwDfiB,aAAe,SAACO,EAAWC,GACzBzB,EAAKmE,SAAS,CACZ3C,YACAC,eA3DWzB,EA+DfY,gBAAkB,WAChBZ,EAAKmE,SAAS,CACV3C,UAAW,IACXC,UAAW,CAAC,YAAa,eAhE3BzB,EAAKO,MAAQ,CACX2E,KAAM,OACN1E,SAAU,GACV6C,cAAe,GACfgC,QAAS,GACTC,kBAAcC,EACd/D,UAAW,IACXC,UAAW,CAAC,YAAa,aAThBzB,mFAcXG,KAAKqF,qDAGYC,EAAWC,GACzBvF,KAAKI,MAAM2E,OAASQ,EAAUR,MAC/B/E,KAAKqF,4CAMPrF,KAAKwF,kBACLxF,KAAKyF,4DAGW,IAAAtE,EAAAnB,KAChB4D,MAAM,6BAA+B5D,KAAKI,MAAM2E,KAAO,mBACpDlB,KAAK,SAACC,GACL,OAAOA,EAASC,SAEjBF,KAAK,SAACN,GACLpC,EAAK6C,SAAS,CAAEd,cAAeK,EAAcU,OAAOyB,UAAUC,oDAIjD,IAAAvB,EAAApE,KACjB4D,MAAM,6BAA+B5D,KAAKI,MAAM2E,KAAO,4BAClDlB,KAAK,SAACC,GACP,OAAOA,EAASC,SAEfF,KAAK,SAAC+B,GACPxB,EAAKJ,SAAS,CAAE3D,SAAUuF,EAAW3B,OAAO4B,aAAa5C,8CAyBtD,IAAA6C,EAC0C9F,KAAKI,MAA9C2E,EADDe,EACCf,KAAM1E,EADPyF,EACOzF,SAAUgB,EADjByE,EACiBzE,UAAWC,EAD5BwE,EAC4BxE,UAEnC,OACEC,EAAAC,EAAAC,cAAA,OAAKa,UAAU,OACbf,EAAAC,EAAAC,cAAA,UAAQa,UAAU,cAChBf,EAAAC,EAAAC,cAACsE,EAAD,CAAQtB,iBAAkBzE,KAAKyE,iBAAkBhE,gBAAiBT,KAAKS,kBACvEc,EAAAC,EAAAC,cAACuE,EAAD,CAAKjB,KAAMA,EAAM1E,SAAUA,EAAUI,gBAAiBT,KAAKS,gBAAiBY,UAAYA,EAAWC,UAAYA,EAAYR,aAAcd,KAAKc,wBA/EtImF,IAAMjD,WCEJkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjF,EAAAC,EAAAC,cAACgF,EAAD,MAASC,SAASC,eAAe,UD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjD,KAAK,SAAAkD,GACjCA,EAAaC","file":"static/js/main.c2bc1b06.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-w.c1ad6f31.png\";","import React, { Component } from 'react';\nimport { Map, TileLayer, Marker, Popup, Polyline } from 'react-leaflet';\nimport Control from 'react-leaflet-control';\n\n// Map Styles\nconst mapStyled = 'https://api.mapbox.com/styles/v1/jesusesteban/ck6gzx8x604xk1ipgqkwomp1g/tiles/256/{z}/{x}/{y}@2x?access_token=pk.eyJ1IjoiamVzdXNlc3RlYmFuIiwiYSI6ImNqc3VlY3EydTAxdDMzeXB2a2NycXJxZTIifQ.6Jxvu3C-J7-XWRjCVdMwdw';\n// const mapStyled = 'https://api.mapbox.com/styles/v1/jesusesteban/ck17yr99g3bx21coh6z6t0mz0/tiles/256/{z}/{x}/{y}@2x?access_token=pk.eyJ1IjoiamVzdXNlc3RlYmFuIiwiYSI6ImNqc3VlY3EydTAxdDMzeXB2a2NycXJxZTIifQ.6Jxvu3C-J7-XWRjCVdMwdw';\n//const mapStyled = 'https://api.mapbox.com/styles/v1/jesusesteban/cjyn1qsf100x61cpk2cjvnvij/tiles/256/{z}/{x}/{y}@2x?access_token=pk.eyJ1IjoiamVzdXNlc3RlYmFuIiwiYSI6ImNqc3VlY3EydTAxdDMzeXB2a2NycXJxZTIifQ.6Jxvu3C-J7-XWRjCVdMwdw';\n// const mapStyled = 'https://api.mapbox.com/styles/v1/jesusesteban/cjynakrxe1jzk1cqco7zdva6j/tiles/256/{z}/{x}/{y}@2x?access_token=pk.eyJ1IjoiamVzdXNlc3RlYmFuIiwiYSI6ImNqc3VlY3EydTAxdDMzeXB2a2NycXJxZTIifQ.6Jxvu3C-J7-XWRjCVdMwdw';\n\n\n\nexport default class CircuitMap extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = { \n            circuits: []\n        };\n        this.handleClickMarker = this.handleClickMarker.bind(this);\n        this.props.handleResetZoom();\n    }\n\n\n    componentDidMount() {\n        // const leafletMap = this.leafletMap.leafletElement;\n        // leafletMap.on('zoomend', () => {\n        //     const updatedZoomLevel = leafletMap.getZoom();\n        //     this.handleZoomLevelChange(updatedZoomLevel);\n        // });     \n    }\n\n\n\n    handleClickMarker(e){        \n        const { latlng } = e;\n        const { lat, lng } = latlng;\n        this.props.setMapCenter(15, [lat, lng]);\n    }\n\n\n    getPolyLineArray() {\n        const circuitsCoordinates = this.props.circuits.map(circuit => {\n            return [circuit.Location.lat, circuit.Location.long];\n        });\n        return circuitsCoordinates;\n    }\n\n        \n    render() {\n        const { circuits, zoomLevel, mapCenter, handleResetZoom } = this.props;\n        return (\n            <div>\n                <Map\n                    ref={(ref) => { this.map = ref; }}\n                    center={mapCenter}\n                    zoom={zoomLevel}\n                    >\n                <TileLayer\n                    attribution={\"JesÃºs Esteban\"}\n                    url={mapStyled}\n                    />\n\n                {circuits.map((circuit) => {\n                    return (\n                        <React.Fragment>\n                            <Marker \n                                position={[circuit.Location.lat, circuit.Location.long]}\n                                onClick={ e=> this.handleClickMarker(e)}   \n                                // icon=\n                            >\n                                <Popup>\n                                    <ul className={\"list-popup\"}>\n                                        <li className={\"title\"}><span>{circuit.circuitName}</span></li>\n                                        <li>\n                                            <span>{circuit.Location.locality} </span>\n                                            /\n                                            <span> {circuit.Location.country}</span>\n                                        </li>\n                                        <li>\n                                            <a href={circuit.url} target=\"_blank\">Wikipedia</a>\n                                        </li>\n                                    </ul>\n                                    \n                                </Popup>\n                            </Marker>     \n                        </React.Fragment>                        \n                    )\n                    })\n                }                \n\n                {/* <Polyline color=\"#F1C40F\"  weight=\"1\" positions={this.getPolyLineArray()}/> */}\n\n\n\n\n                <Control position=\"topright\">\n                    <div>\n                        <div style={{ marginLeft: '37px', marginTop: '37px' }}>\n                            <button onClick={() => handleResetZoom()}>\n                                Reset Zoom\n                            </button>\n                        </div>\n                    </div>\n                </Control>\n                </Map>\n            </div>\n        );\n    }\n}\n\n\n\n\n\n\n\n// Recursos\n// https://towardsdatascience.com/creating-a-bubbles-map-using-react-leaflet-e75124ca1cd2\n// Ejemplos de mapas https://leaflet-extras.github.io/leaflet-providers/preview/\n// https://github.com/humangeo/leaflet-dvf/wiki/2.-Examples\n// http://www.liedman.net/leaflet-routing-machine/\n// http://rowanwins.github.io/leaflet-easyPrint/\n// https://github.com/dwilhelm89/Leaflet.StyleEditor","import React, { Component } from 'react';\n\n\n\nexport default class Circuits extends Component {\n\n    render() {\n\n        const { circuitsYears } = this.props;\n\n        return (\n            <div>\n                <div className={'list-circuits'}>\n                    <ul>\n                    {circuitsYears.map((circuitsYears) => {\n                        return (\n                            <li>\n                                <a href=\"#\">{ circuitsYears.raceName }</a>\n                            </li>                        \n                        )\n                        })\n                    }\n\n                    </ul>\n                </div>\n            </div>\n        );\n    }\n}\n\n\n\n","import React, { Component } from 'react';\n\n// import SelectYear from '../select-year/select-year';\nimport Circuits from '../circuits/circuits';\n\n\n\nexport default class Content extends Component {\n\n\n\n    render() {\n\n        return (\n            <div className={\"content\"}>\n                \n                {/* <SelectYear year={this.props.year} handleYearChange={this.props.handleYearChange}/> */}\n                \n                <Circuits year={this.props.year} circuitsYears={this.props.circuitsYears}/>\n                \n            </div>\n        );\n    }\n}\n\n\n\n","import React, { Component } from 'react';\nimport Select from 'react-select';\n\nexport default class SelectYear extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { \n            yearsCircuits: []\n        };\n    }\n\n    \n    componentWillMount() {\n        fetch('https://ergast.com/api/f1/seasons.json?limit=100')\n          .then((response) => {\n            return response.json()\n          })\n          .then((yearsCircuits) => {\n              this.setState({ yearsCircuits: yearsCircuits.MRData.SeasonTable.Seasons})\n            })\n        }   \n        \n        \n        \n        \n        getOptions = () => {\n            const options = [...this.state.yearsCircuits].map((field) => {\n                return ({\n                    value: field.season, \n                    label: field.season\n                })\n            });\n            return options;\n        }\n        \n        \n        \n        \n        render() {\n            const options = this.getOptions();\n            return (\n            <div>\n                <div className={\"select-year\"}>\n                    <Select \n                        isSearchable={false}\n                        options={options}     \n                        onChange={e => {\n                            this.props.handleYearChange({target:{value: e.value}});\n                            this.props.handleResetZoom();\n                        }\n                        }      \n                    />\n\n\n\n                    {/* <select value={this.props.year} onChange={value=> this.props.handleYearChange(value)}>\n                    {yearsCircuits.map((yearsCircuits) => {\n                        return (\n                            <option key={yearsCircuits.season} value={yearsCircuits.season}> { yearsCircuits.season } </option>                        \n                        )\n                        })\n                    }\n\n                    </select> */}\n                </div>\n            </div>\n        );\n    }\n}\n\n\n\n","import React, { Component } from 'react';\n\nimport SelectYear from '../select-year/select-year';\nimport logo from '../../images/logo-w.png';\n\nexport default class Content extends Component {\n    constructor(props){\n        super(props)\n    }\n\n\n    render() {\n        return (\n            <div>\n                <div className={\"header\"}>\n                    <img src={logo} alt=\"Logo\" />\n                    <SelectYear year={this.props.year} handleYearChange={this.props.handleYearChange} handleResetZoom={this.props.handleResetZoom}/>\n                </div>\n                \n                            \n            </div>\n        );\n    }\n}\n\n\n\n","import React from 'react';\nimport './App.scss';\n\nimport Map from './components/map/map';\nimport Content from './components/content/content';\nimport Header from './components/header/header';\n\n\n\n\nclass App extends React.Component {\n\n  constructor(){\n    super()\n    this.state = {\n      year: '2019',\n      circuits: [],\n      circuitsYears: [],\n      results: [],\n      clickCircuit: undefined,\n      zoomLevel: 2.2,\n      mapCenter: [22.9837669, -10.2810849]\n    }\n  }\n\n  componentDidMount(){\n    this.getData();\n  }\n  \n  componentDidUpdate(prevProps, prevState){\n    if(this.state.year !== prevState.year){\n      this.getData();\n    }\n  }\n  \n  \n  getData(){\n    this.getListCircuits();\n    this.getYearCircuits();\n  }\n\n  getListCircuits() {\n    fetch('https://ergast.com/api/f1/' + this.state.year + '.json?limit=100')\n      .then((response) => {\n        return response.json()\n      })\n      .then((yearsCircuits) => {\n        this.setState({ circuitsYears: yearsCircuits.MRData.RaceTable.Races})\n      })\n  }\n\n  getYearCircuits () {\n    fetch('https://ergast.com/api/f1/' + this.state.year + '/circuits.json?limit=100')\n        .then((response) => {\n        return response.json()\n        })\n        .then((resultados) => {\n        this.setState({ circuits: resultados.MRData.CircuitTable.Circuits})\n    })\n}\n\n\n\nhandleYearChange = event => {\n  const year = event.target.value;\n  this.setState({ year });\n}\n\nsetMapCenter = (zoomLevel, mapCenter) => {\n  this.setState({\n    zoomLevel, \n    mapCenter\n  })\n}\n\nhandleResetZoom = () => {\n  this.setState({ \n      zoomLevel: 2.2,\n      mapCenter: [22.9837669, -10.2810849]\n  });\n}\n\n  render (){\n    const { year, circuits, zoomLevel, mapCenter } = this.state;\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Header handleYearChange={this.handleYearChange} handleResetZoom={this.handleResetZoom} />\n          <Map year={year} circuits={circuits} handleResetZoom={this.handleResetZoom} zoomLevel={ zoomLevel} mapCenter={ mapCenter } setMapCenter={this.setMapCenter}/> \n          {/* <Content year={year} circuitsYears={circuitsYears} handleYearChange={this.handleYearChange} /> */}\n        </header>      \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('mount'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}